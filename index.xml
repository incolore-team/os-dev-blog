<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>操作系统开发</title>
    <link>https://os-dev.incolore.net/</link>
    <description>Recent content on 操作系统开发</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Jan 2021 08:37:54 +0800</lastBuildDate><atom:link href="https://os-dev.incolore.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VirtualBox 的安装</title>
      <link>https://os-dev.incolore.net/docs/1.1-virtualbox-%E7%9A%84%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 23 Jan 2021 08:37:54 +0800</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/1.1-virtualbox-%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
      <description>下载#访问 Downloads – Oracle VM VirtualBox
找到：
点击开始下载。
安装#全部按照默认设置进行安装：
中途若有任何“安全中心”、“杀毒软件”的提示，全部选择允许。
结果#之后即可看到 VirtualBox 的主窗口：</description>
    </item>
    
    <item>
      <title>Windows 基础操作</title>
      <link>https://os-dev.incolore.net/posts/windows-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 23 Jan 2021 08:37:54 +0800</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/windows-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</guid>
      <description>Windows（Win）键在哪里#如何打开 PowerShell 窗口（管理员权限）#按下 Win+X 键。
点击 Windows PowerShell（管理员） 菜单项，即可打开 PowerShell。
如何打开 cmd 窗口（普通权限和管理员权限）#如果只需要普通权限，按下 Win+R，输入 cmd：
然后回车（或点击 确定 ）即可：
如果需要管理员权限，可打开 PowerShell 窗口（管理员权限），然后执行 cmd 命令：
执行 exit 命令可退出。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/1.2-%E5%9C%A8-virtualbox-%E5%AE%89%E8%A3%85-ubuntu-%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/1.2-%E5%9C%A8-virtualbox-%E5%AE%89%E8%A3%85-ubuntu-%E7%B3%BB%E7%BB%9F/</guid>
      <description>在 VirtualBox 安装 Ubuntu 系统#访问 Index of /ubuntu-releases/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror
下载#找到版本号最新的发行版：
点击进入：
找到带有 desktop（桌面版），amd64（64 位架构） 的 iso 格式下载链接。复制链接地址，用合适的工具下载：
等待下载的过程中，可以继续后面的操作。
创建虚拟机#在主界面点击【新建】：
基本信息#将会显示如下窗口：
名称：任取
文件夹：任取，建议放在系统盘之外的磁盘，以免之后占用过多空间
类型：选择 Linux
版本：选择 Ubuntu (64bit)
点击【下一步】。
内存大小#内存配额建议在 1024~2048 MB 之间。建议为你的系统的内存的 1/8。你可以在任务管理器查看自己电脑的内存大小。点【下一步】。
硬盘类型和大小#选择 现在创建虚拟硬盘，点击【创建】
类型默认【VDI】，下一步。
默认【动态分配】，下一步。
大小可以多给一点，因为是动态分配，所以这里可以任意划分上限，建议 20~100GB。点击【创建】。
现在虚拟机建好了。
安装系统#在左边选中刚才创建的系统，点击工具栏的【启动】。
选择启动盘#点击小图标：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/1.3-%E4%B8%BA-ubuntu-%E8%A7%A3%E9%99%A4%E7%BD%91%E7%BB%9C%E5%B0%81%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/1.3-%E4%B8%BA-ubuntu-%E8%A7%A3%E9%99%A4%E7%BD%91%E7%BB%9C%E5%B0%81%E9%94%81/</guid>
      <description>为 Ubuntu 解除网络封锁# 外交部耿爽表示：正确地看待并维护中美在科技、人文领域的交流合作，多做有利于增进中美互信与合作的事情，要拉手而不是松手，要拆墙而不是筑墙。
 为了避免今后遇到的各种奇葩网络问题，我们今天要先做一点微小的工作。
创建 HTTP 局域网代理服务器#这一步是把我们的科学上网工具转化为一个 HTTP 代理服务器。需要得到一个 http://ip:port 形式的地址。对于 v2ray, shadowsocks, Clash, 操作有所不同。这里以 Clash 为例。如果你使用的是其它程序，请自行搜索“xxx http 局域网代理”。
查看自己的 IP 地址#按下 Win+X 键。（Win 键就是能打开开始菜单那个键，在你的键盘的最底下一行，一般有个窗户的样子）
打开 PowerShell，执行如下命令：
PS C:\Windows\system32&amp;gt; ipconfig 你会看到：
Windows IP 配置 以太网适配器 以太网: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::a5de:d926:8b89:ab0c%7 IPv4 地址 .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/1.4-%E4%B8%BA-ubuntu-%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/1.4-%E4%B8%BA-ubuntu-%E5%AE%89%E8%A3%85%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD/</guid>
      <description>为 Ubuntu 安装增强功能#准备工作#先登录。
按下 Ctrl+Alt+T 呼出终端。
执行如下指令：
 注意：你需要输入的指令是 $ 后面这部分，也即 sudo apt update，后面的也是一样。前面的 pluvet@localos 表示用户和主机名，在终端上是不能直接编辑的，你的输入光标一开始就会在 $ 后面。打上命令之后，按回车执行命令。按 Ctrl+C 强行中止执行。
 pluvet@localos:~$ sudo apt update 然后执行：
pluvet@localos:~$ sudo apt install virtualbox-guest-utils virtualbox-guest-dkms 等待执行完成。
 注意：你可能会遇到下载失败（Failed to fetch&amp;hellip;），解决方法见《为 Ubuntu 解除网络封锁》。
 插入虚拟安装光盘#在菜单点击 设备 / 安装增强功能：
点击 Run 并输入密码：
等。
读上面的字，如果没有出现 Failed，Unable 之类的负面词汇，说明你成功了。
回车。关机：
重启后即可生效。
常用配置#设置分辨率#启用双向剪贴板共享#启用拖放同理。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/1.5-%E4%B8%BA-ubuntu-%E9%85%8D%E7%BD%AE-ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E5%AF%B9%E6%8E%A5-vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/1.5-%E4%B8%BA-ubuntu-%E9%85%8D%E7%BD%AE-ssh-%E8%BF%9E%E6%8E%A5%E5%B9%B6%E5%AF%B9%E6%8E%A5-vscode/</guid>
      <description>为 Ubuntu 配置 SSH 连接并对接 VSCode#以下以 母机 代称虚拟机所运行在的实体机。
生成密钥#在母机 PowerShell 中，执行如下命令，
PS C:\Windows\system32&amp;gt; cd ~/.ssh PS C:\Users\i\.ssh&amp;gt; ls 目录: C:\Users\i\.ssh Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2021-01-06 23:33 142 config -a---- 2021-01-06 23:24 1679 id_rsa -a---- 2021-01-06 23:24 400 id_rsa.pub -a---- 2021-01-06 23:34 176 known_hosts 可以看到存在 id_rsa, id_rsa.pub 文件，说明已经有密钥了。
 如果执行 ls 命令报错，或者你的用户名含有中文，说明你还没有密钥，建议通过 mkdir c:\ssh 创建文件夹。然后保存位置写成 c:\ssh\id_rsa
 如果你没有，请如此生成一个：
执行：
PS C:\Users\i\.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/1.6-%E5%9C%A8-ubuntu-%E4%B8%AD%E5%AE%89%E8%A3%85-bochs-%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/1.6-%E5%9C%A8-ubuntu-%E4%B8%AD%E5%AE%89%E8%A3%85-bochs-%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>在 Ubuntu 中安装 Bochs 虚拟机#下载 Bochs#访问 Bochs x86 PC emulator - Browse /bochs at SourceForge.net。
找到最新版：
我们要编译安装，所以下载 bochs-2.6.11.tar.gz
下载之后是存放在 Windows 上的（当然，你也可以直接在 Ubuntu 中打开 Firefox 浏览器下载），我们直接用 VSCode 传输到 Ubuntu 中。
传输源代码到 Linux 中#在 VSCode 打开终端（Ctrl+Shift+~），在 ~ 下创建 dev 目录：
打开这个目录：
然后将文件从 Windows 资源管理器直接拖进来就行：
执行：
pluvet@localos:~/dev$ tar -zvxf bochs-2.6.11.tar.gz 进行解压。
进入解压到的目录
pluvet@localos:~/dev$ cd bochs-2.6.11/ 编译安装#以防万一，请先执行：
sudo apt install libx11-devsudo apt install xorg-dev为了知道如何安装，我们看一下 bochs: The Open Source IA-32 Emulation Project (New Bochs Documentation) (sourceforge.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/2.1-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/2.1-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/</guid>
      <description>第一个引导程序#什么是 BIOS#BIOS 就是内置在主板上的一个程序，当系统启动时，会执行 BIOS 中的代码，进行设备检查（称为自检）等等。当检查通过之后，会读取 启动设备 中的引导程序，从而将操作系统加载到内存运行。
什么是引导程序#引导程序就是把操作系统加载到内存，带动运行操作系统的程序。
BIOS 如何执行引导程序#BIOS 会读取启动设备的前 512B（B 是字节单位，Byte），这些字节是设备的第一个扇区，如果这个扇区的结束字节是 0x55, 0xaa 则表示这个扇区是可引导扇区，这些字节称为（即主引导记录（master boot record，MBR）），将这一块加载到物理内存（具体位置是 0x7c00）中，然后执行其中的二进制代码（这些代码就是引导程序）。
安装 NASM#NASM 是将汇编代码编译为二进制的工具。安装方式：
sudo apt install nasm 安装 HexEdit#Hexedit 是一个十六进制编译器。安装：
sudo apt install hexedit 第一个引导程序#下面，我们用 Intel 汇编，编写一个最简单的引导程序：
; 告知编译器程序的起始位置org 0x7c00BaseOfStack equ 0x7c00Label_Start:mov ax, csmov ds, axmov es, axmov ss, axmov sp, BaseOfStack; ======== 清屏mov ax, 0600hmov bx, 0700hmov cx, 0mov dx, 0184fhint 10h; ======== 设置焦点mov ax, 0200hmov bx, 0000hmov dx, 0000hint 10h; ======== 在屏幕上显示 Start Booting.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/2.2-fat-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/2.2-fat-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>FAT 文件系统#硬盘的结构和原理#物理结构#历史上的机械硬盘，很像是层层叠起的光盘。虽然如今已经有固态硬盘等更快的存储设备，但是对文件系统进行抽象设计时，我们依旧沿用这些老的概念。
你可以观看这个视频 【回形针PaperClip】你的硬盘是如何储存数据的？ 获得一些基础知识。
磁头（head）：可以读写磁盘表面的磁向。每个盘面有一个磁头，它极其贴近地悬浮在盘面上，但是绝对不与盘面接触，否则会损坏磁头和盘面；
磁道（track）：磁道是单个盘面上的同心圆，当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道，一个盘面上的磁道可以有成千上万个。相邻磁道之间并不是紧挨着的，这是因为磁化单元相隔太近时磁性会产生相互影响，同时也为磁头的读写带来困难。
柱面（cylinder）：在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面。
扇区（sector）：磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector）。硬盘的第一个扇区，叫做引导扇区。扇区是被间隙（gap）分割的圆的片段，间隙未被磁化成0或者1。注意，扇区是读写磁盘最基本的单位，如果一个扇区因为某种原因被破坏，那么整个扇区的数据都会受影响。
电脑通过观察磁头接收到的感应电流的方向判断数据是 0 还是 1。通过磁头施加磁场后，对磁介质的磁化作用改变数据的内容。
抽象结构#以 Linux 系统为例，假设你买了一个 500G 硬盘和一个 32G U 盘，则在系统中被认作磁盘 sda 和 sdb。
经过格式化，把 sda 格式化为物理分区（物理卷），得到 sda1（500G）。把 sdb 格式化为两个 物理分区（物理卷），得到 sdb1（4G） 和 sdb2（28G，注意，这个容量分配是人决定的）。
sda1, sdb1 和 sdb2 可以共同构成 卷组。
可以在 卷组 上进行逻辑分区，得到逻辑卷 1 和逻辑卷 2.
硬盘的寻址方式#寻址就是要读写的数据的位置进行确定。分为 CHS 寻址和 LBA 寻址。
CHS 寻址：将硬盘划分为柱面(Cylinder)、磁头（Heads）、扇区(Sector)。使用具体的这三个数据值（物理地址）去寻找对应位置的数据。
LBA 寻址：地址不再表示实际硬盘的实际物理地址（柱面、磁头和扇区），而是使用逻辑地址。LBA编址方式将 CHS 这种三维寻址方式转变为一维的线性寻址，把扇区依次编号，通过编号找到对应的扇区，这样就只需要一个参数。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/docs/2.3-bootloader-%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/docs/2.3-bootloader-%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/</guid>
      <description>了解了 FAT12 文件系统，我们编写一个 BootLoader 程序。
编写 boot#先上代码：
org	0x7c00	BaseOfStackequ	0x7c00 ; Loader 程序的起始物理地址：BaseofLoader &amp;lt;&amp;lt; 4 + OffsetOfLoader = 0x10000 BaseOfLoaderequ	0x1000 OffsetOfLoaderequ	0x00 ; 根目录占用的扇区数 ; 14 = (BPB_RootEntCnt * 32 + BPB_BytesPerSec - 1) / BPB_BytesPerSec RootDirSectorsequ	14 ; 根目录的起始扇区号 ; 19 = 保留扇区数 + FAT表扇区数 * FAT 表份数 SectorNumOfRootDirStartequ	19 ; FAT 表的起始扇区号 SectorNumOfFAT1Startequ	1 ; 由于文件起始簇号与数据起始簇号的差值而建立的变量 ; 17 = 根目录起始扇区号 - 2 SectorBalanceequ	17	jmp	short Label_Start nop BS_OEMName	db	&amp;#39;MINEboot&amp;#39; BPB_BytesPerSec	dw	512 BPB_SecPerClus	db	1 BPB_RsvdSecCnt	dw	1 BPB_NumFATs	db	2 BPB_RootEntCnt	dw	224 BPB_TotSec16	dw	2880 BPB_Media	db	0xf0 BPB_FATSz16	dw	9 BPB_SecPerTrk	dw	18 BPB_NumHeads	dw	2 BPB_HiddSec	dd	0 BPB_TotSec32	dd	0 BS_DrvNum	db	0 BS_Reserved1	db	0 BS_BootSig	db	0x29 BS_VolID	dd	0 BS_VolLab	db	&amp;#39;boot loader&amp;#39; BS_FileSysType	db	&amp;#39;FAT12 &amp;#39; Label_Start: mov	ax,	cs mov	ds,	ax mov	es,	ax mov	ss,	ax mov	sp,	BaseOfStack ;=======	clear screen mov	ax,	0600h mov	bx,	0700h mov	cx,	0 mov	dx,	0184fh int	10h ;=======	set focus mov	ax,	0200h mov	bx,	0000h mov	dx,	0000h int	10h ;=======	display on screen : Start Booting.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/posts/bochs-%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/bochs-%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>转载自：Bochs调试常用命令 | Ney的技术博客 (petpwiuta.github.io)
1 简介#Bochs是做系统开发常用的虚拟机，调试系统内核很方便。
安装Bochs一般是从源码编译再安装，而调试器属于可选功能，所以在编译Bochs时需要使用--enable-debugger和--enable-disasm标志开启调试模块。例如：
./configure --enable-debugger --enable-disasm #后面还有其他选项，此处省略需要注意调试功能在 2.5.4 版本以上才有，确保下载的代码是高于这个版本的。
2 常见的几个使用场景#2.1 查看寄存器#汇编代码中，调试最常用的功能就是查看寄存器的内容。
 r 查看通用寄存器 sreg 查看段寄存器 creg 查看控制寄存器 dreg 查看调试寄存器 info cpu 查看所有寄存器  2.2 查找和定位代码#次常用的肯定是控制代码执行流程，代码执行到想要仔细跟踪的那个部分。
  b 内存地址 设置断点
如b 0x7c00，在线性地址0x7c00处设置断点。
  info break 查看设置过的断点
  c 继续执行代码
一般设置断点后，想让代码恢复执行，就使用这个命令。
  s 单步执行
单步执行一行代码，和高级语言调试器的step into按钮类似，遇到函数调用会跳转到函数内部执行。单步执行命令也可以带参数，指定执行的次数，如 s 100 就是单步执行100次。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/posts/git-%E9%80%9F%E6%88%90%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/git-%E9%80%9F%E6%88%90%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>由于网上的教程要么啰嗦，要么太过随意、太旧，所以写了这篇指南，尽可能取得实战能力、原理理解、学习效率的平衡。
什么是 Git？#Git 是一个文件管理工具，用于需要处理文件合并、更新等操作和这些操作的追踪。想象你在写一个程序，这个程序涉及到 A, B, C&amp;hellip; 各个源代码文件，有一天，你修改了文件 C，然后重新发布了程序，突然你发现这个修改会导致严重的 BUG，你必须恢复到原来的文件，于是每次修改你都要把当时的源代码保存一遍，非常麻烦。或者假设有很多人帮助你开发这个程序，你就要手动合并他们提交的代码。有了 Git 之后，我们可以方便地管理代码的各个版本、管理其他人的合并等等。
前置知识#学习之前，你需要知道：
 常用的 Linux 命令 Vim 编辑器基本操作  注册一个 Github 账号#Github 是一个在线的代码托管平台，使用 Github 你可以将自己的代码推送到服务器，或者从服务器下载代码。类似的平台还有 Gitee、GitBucket、Bitbucket 等，他们都支持 Git。此外你也可以自己搭建一个代码托管服务器。
为了我们后面学习过程中方便演练各种操作，需要你注册一个 Github 账号，或者使用你有的账号。
访问 GitHub: Where the world builds software · GitHub，点击 Sign up 按钮进入注册页面，填写必要的信息进行注册。
安装 Git#我们以 Linux（Ubuntu）系统为例。执行：
$ sudo apt-get install git -y 进行安装。
配置用户信息#之后你需要配置用户信息。执行：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/posts/%E4%B8%BB%E8%A6%81%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/%E4%B8%BB%E8%A6%81%E5%8F%82%E8%80%83/</guid>
      <description>xv6#xv6 是 MIT 开发的一个教学用的完整的类 Unix 操作系统，并且在 MIT 的操作系统课程 6.828 中使用。通过阅读并理解 xv6 的代码，可以清楚地了解操作系统中众多核心的概念
学习：6.828 / Fall 2012 (mit.edu)
地址：ranxian/xv6-chinese: 中文版的 MIT xv6 文档 (github.com)
OSDev.org#非常详细的操作系统开发百科全书。
地址：OSDev.org](http://www.osdev.org/)</description>
    </item>
    
  </channel>
</rss>
