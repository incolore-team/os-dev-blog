<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 操作系统开发</title>
    <link>https://os-dev.incolore.net/posts/</link>
    <description>Recent content in Posts on 操作系统开发</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Jan 2021 08:37:54 +0800</lastBuildDate><atom:link href="https://os-dev.incolore.net/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows 基础操作</title>
      <link>https://os-dev.incolore.net/posts/windows-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 23 Jan 2021 08:37:54 +0800</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/windows-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</guid>
      <description>Windows（Win）键在哪里#如何打开 PowerShell 窗口（管理员权限）#按下 Win+X 键。
点击 Windows PowerShell（管理员） 菜单项，即可打开 PowerShell。
如何打开 cmd 窗口（普通权限和管理员权限）#如果只需要普通权限，按下 Win+R，输入 cmd：
然后回车（或点击 确定 ）即可：
如果需要管理员权限，可打开 PowerShell 窗口（管理员权限），然后执行 cmd 命令：
执行 exit 命令可退出。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/posts/bochs-%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/bochs-%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>转载自：Bochs调试常用命令 | Ney的技术博客 (petpwiuta.github.io)
1 简介#Bochs是做系统开发常用的虚拟机，调试系统内核很方便。
安装Bochs一般是从源码编译再安装，而调试器属于可选功能，所以在编译Bochs时需要使用--enable-debugger和--enable-disasm标志开启调试模块。例如：
./configure --enable-debugger --enable-disasm #后面还有其他选项，此处省略需要注意调试功能在 2.5.4 版本以上才有，确保下载的代码是高于这个版本的。
2 常见的几个使用场景#2.1 查看寄存器#汇编代码中，调试最常用的功能就是查看寄存器的内容。
 r 查看通用寄存器 sreg 查看段寄存器 creg 查看控制寄存器 dreg 查看调试寄存器 info cpu 查看所有寄存器  2.2 查找和定位代码#次常用的肯定是控制代码执行流程，代码执行到想要仔细跟踪的那个部分。
  b 内存地址 设置断点
如b 0x7c00，在线性地址0x7c00处设置断点。
  info break 查看设置过的断点
  c 继续执行代码
一般设置断点后，想让代码恢复执行，就使用这个命令。
  s 单步执行
单步执行一行代码，和高级语言调试器的step into按钮类似，遇到函数调用会跳转到函数内部执行。单步执行命令也可以带参数，指定执行的次数，如 s 100 就是单步执行100次。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/posts/git-%E9%80%9F%E6%88%90%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/git-%E9%80%9F%E6%88%90%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>由于网上的教程要么啰嗦，要么太过随意、太旧，所以写了这篇指南，尽可能取得实战能力、原理理解、学习效率的平衡。
什么是 Git？#Git 是一个文件管理工具，用于需要处理文件合并、更新等操作和这些操作的追踪。想象你在写一个程序，这个程序涉及到 A, B, C&amp;hellip; 各个源代码文件，有一天，你修改了文件 C，然后重新发布了程序，突然你发现这个修改会导致严重的 BUG，你必须恢复到原来的文件，于是每次修改你都要把当时的源代码保存一遍，非常麻烦。或者假设有很多人帮助你开发这个程序，你就要手动合并他们提交的代码。有了 Git 之后，我们可以方便地管理代码的各个版本、管理其他人的合并等等。
前置知识#学习之前，你需要知道：
 常用的 Linux 命令 Vim 编辑器基本操作  注册一个 Github 账号#Github 是一个在线的代码托管平台，使用 Github 你可以将自己的代码推送到服务器，或者从服务器下载代码。类似的平台还有 Gitee、GitBucket、Bitbucket 等，他们都支持 Git。此外你也可以自己搭建一个代码托管服务器。
为了我们后面学习过程中方便演练各种操作，需要你注册一个 Github 账号，或者使用你有的账号。
访问 GitHub: Where the world builds software · GitHub，点击 Sign up 按钮进入注册页面，填写必要的信息进行注册。
安装 Git#我们以 Linux（Ubuntu）系统为例。执行：
$ sudo apt-get install git -y 进行安装。
配置用户信息#之后你需要配置用户信息。执行：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://os-dev.incolore.net/posts/%E4%B8%BB%E8%A6%81%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://os-dev.incolore.net/posts/%E4%B8%BB%E8%A6%81%E5%8F%82%E8%80%83/</guid>
      <description>xv6#xv6 是 MIT 开发的一个教学用的完整的类 Unix 操作系统，并且在 MIT 的操作系统课程 6.828 中使用。通过阅读并理解 xv6 的代码，可以清楚地了解操作系统中众多核心的概念
学习：6.828 / Fall 2012 (mit.edu)
地址：ranxian/xv6-chinese: 中文版的 MIT xv6 文档 (github.com)
OSDev.org#非常详细的操作系统开发百科全书。
地址：OSDev.org](http://www.osdev.org/)</description>
    </item>
    
  </channel>
</rss>
